"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ"""

import torch
import sys
import os
import numpy as np
from flwr.common import Context, Message, RecordDict, ArrayRecord, MetricRecord, ConfigRecord
import logging

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import fl_app.client_app
from fl_app.client_app import app  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_config_from_pyproject():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ pyproject.toml"""
    pyproject_path = "pyproject.toml"
    
    if not os.path.exists(pyproject_path):
        raise FileNotFoundError(f"–§–∞–π–ª {pyproject_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —á—Ç–µ–Ω–∏—è TOML
        try:
            import tomli
            with open(pyproject_path, "rb") as f:
                config = tomli.load(f)
        except ImportError:
            # –î–ª—è Python 3.11+ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π tomllib
            import tomllib
            with open(pyproject_path, "rb") as f:
                config = tomllib.load(f)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ [tool.flwr.app.config]
        flwr_config = config.get("tool", {}).get("flwr", {}).get("app", {}).get("config", {})
        
        if not flwr_config:
            raise ValueError("–†–∞–∑–¥–µ–ª [tool.flwr.app.config] –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pyproject.toml")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ pyproject.toml")
        return flwr_config
        
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è pyproject.toml: {e}")

def create_mock_context(run_config, node_config=None):
    """–°–æ–∑–¥–∞–µ—Ç mock –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return Context(
        run_id="test_run_001",
        run_config=run_config,
        node_id="test_node_0",
        node_config=node_config or {
            "partition-id": 0,
            "num-partitions": 10
        },
        state={}
    )

def test_client_training():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê ===")
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ pyproject.toml
    config = load_config_from_pyproject()
    
    # 2. –°–æ–∑–¥–∞–µ–º mock –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ pyproject.toml
    mock_context = create_mock_context(
        run_config=config,
        node_config={
            "partition-id": 0,  # —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ 0
            "num-partitions": 10
        }
    )
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ñ—É–Ω–∫—Ü–∏–∏ train –∏ evaluate
    try:
        # –°–æ–∑–¥–∞–µ–º mock –º–æ–¥–µ–ª—å –∏ –ø–æ–ª—É—á–∞–µ–º –µ–µ –≤–µ—Å–∞
        from fl_app.task import create_model
        model = create_model()
        initial_weights = ArrayRecord(model.state_dict())
        
        # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        from flwr.common import ConfigRecord
        mock_message = Message(
            content=RecordDict({
                "arrays": initial_weights,
                "config": ConfigRecord({
                    "batch_size": config["batch_size"],
                    "local_epochs": 2,
                    "lr": config["lr"],
                    "current_round": 1
                })
            }),
            dst_node_id=0,
            message_type="train"
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é train –Ω–∞–ø—Ä—è–º—É—é
        response = fl_app.client_app.train(mock_message, mock_context)
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise

def test_client_evaluation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ü–µ–Ω–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–û–ô –û–¶–ï–ù–ö–ò –ö–õ–ò–ï–ù–¢–ê ===")
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ pyproject.toml
    config = load_config_from_pyproject()
    
    # 2. –°–æ–∑–¥–∞–µ–º mock –∫–æ–Ω—Ç–µ–∫—Å—Ç
    mock_context = create_mock_context(
        run_config=config,
        node_config={
            "partition-id": 0,
            "num-partitions": 10
        }
    )
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é evaluate
    try:
        # –°–æ–∑–¥–∞–µ–º mock –º–æ–¥–µ–ª—å –∏ –≤–µ—Å–∞
        from fl_app.task import create_model
        model = create_model()
        model_weights = ArrayRecord(model.state_dict())
        
        # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        from flwr.common import ConfigRecord
        mock_message = Message(
            content=RecordDict({
                "arrays": model_weights,
                "config": ConfigRecord({
                    "batch_size": config["batch_size"],
                    "current_round": 1
                })
            }),
            dst_node_id=0,
            message_type="evaluate"
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é evaluate –Ω–∞–ø—Ä—è–º—É—é
        response = fl_app.client_app.evaluate(mock_message, mock_context)
        metrics = response.content["metrics"]
        print("‚úÖ –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        print(f"‚úÖ Accuracy: {metrics.get('accuracy', 0):.4f}")
        print(f"‚úÖ Loss: {metrics.get('loss', 0):.4f}")
        print(f"‚úÖ –ü—Ä–∏–º–µ—Ä–æ–≤: {metrics.get('num_examples', 0)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise

def test_data_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω–æ"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ===")
    
    from fl_app.task import get_client_data, load_split
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ pyproject.toml
        config = load_config_from_pyproject()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–ª–∏—Ç –∏—Å–ø–æ–ª—å–∑—É—è –ø—É—Ç—å –∏–∑ pyproject.toml
        split_data = load_split(config["split_path"])
        print(f"‚úÖ Split –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ '{config['split_path']}', –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(split_data['indices'])}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 0 –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ pyproject.toml
        train_loader, val_loader = get_client_data(
            client_id=0,
            split_data=split_data,
            data_dir=config["data_dir"],
            batch_size=32  # –º–∞–ª–µ–Ω—å–∫–∏–π –±–∞—Ç—á –¥–ª—è —Ç–µ—Å—Ç–∞
        )
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ '{config['data_dir']}':")
        print(f"   - –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {len(train_loader.dataset)}")
        print(f"   - –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {len(val_loader.dataset)}")
        print(f"   - –ë–∞—Ç—á–µ–π –≤ train_loader: {len(train_loader)}")
        print(f"   - –ë–∞—Ç—á–µ–π –≤ val_loader: {len(val_loader)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω –±–∞—Ç—á
        for images, labels in train_loader:
            print(f"‚úÖ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {images.shape}")
            print(f"‚úÖ –ú–µ—Ç–∫–∏: {labels.shape}")
            break  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –±–∞—Ç—á
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def print_config_summary():
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        config = load_config_from_pyproject()
        print("\n=== –°–í–û–î–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò–ó PYPROJECT.TOML ===")
        for key, value in config.items():
            print(f"   {key}: {value}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ pyproject.toml...")
    
    # –ü–µ—á–∞—Ç–∞–µ–º —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print_config_summary()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_data_loading()
    test_client_training() 
    test_client_evaluation()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ö–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ pyproject.toml –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ") 
    print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")