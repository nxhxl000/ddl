"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ"""

import sys
import os
import logging
from unittest.mock import Mock, patch
from flwr.common import Context
from flwr.serverapp import Grid

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import fl_app.server_app
from fl_app.server_app import app  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_config_from_pyproject():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ pyproject.toml"""
    pyproject_path = "pyproject.toml"
    
    if not os.path.exists(pyproject_path):
        raise FileNotFoundError(f"–§–∞–π–ª {pyproject_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —á—Ç–µ–Ω–∏—è TOML
        try:
            import tomli
            with open(pyproject_path, "rb") as f:
                config = tomli.load(f)
        except ImportError:
            # –î–ª—è Python 3.11+ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π tomllib
            import tomllib
            with open(pyproject_path, "rb") as f:
                config = tomllib.load(f)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ [tool.flwr.app.config]
        flwr_config = config.get("tool", {}).get("flwr", {}).get("app", {}).get("config", {})
        
        if not flwr_config:
            raise ValueError("–†–∞–∑–¥–µ–ª [tool.flwr.app.config] –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pyproject.toml")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ pyproject.toml")
        return flwr_config
        
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è pyproject.toml: {e}")

def create_mock_context(run_config):
    """–°–æ–∑–¥–∞–µ—Ç mock –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return Context(
        run_id="test_server_run_001",
        run_config=run_config,
        node_id="test_server_node",
        node_config={},
        state={}
    )

def test_server_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –°–ï–†–í–ï–†–ê ===")
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ pyproject.toml
    config = load_config_from_pyproject()
    
    # 2. –°–æ–∑–¥–∞–µ–º mock –∫–æ–Ω—Ç–µ–∫—Å—Ç
    mock_context = create_mock_context(config)
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞
    try:
        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
        from fl_app.server_app import main
        print("‚úÖ –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main() –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ServerApp —Å–æ–∑–¥–∞–µ—Ç—Å—è
        from fl_app.server_app import app
        print("‚úÖ ServerApp —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ –¢–∏–ø app: {type(app).__name__}")
        
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑-–∑–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

def test_model_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–º"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ú–û–î–ï–õ–ò –°–ï–†–í–ï–†–û–ú ===")
    
    try:
        from fl_app.task import create_model
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model = create_model()
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–º")
        print(f"‚úÖ –¢–∏–ø –º–æ–¥–µ–ª–∏: {type(model).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
        print(f"‚úÖ –û–±—É—á–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {trainable_params:,}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device = next(model.parameters()).device
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        raise

def test_config_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–º"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ pyproject.toml
        config = load_config_from_pyproject()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        required_params = ["batch_size", "local_epochs", "lr", "rounds", "data_dir", "split_path"]
        missing_params = [param for param in required_params if param not in config]
        
        if missing_params:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_params}")
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_params}")
        
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        for key, value in config.items():
            print(f"   {key}: {value}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        raise

def test_fedavg_strategy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ FedAvg"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò FEDAVG ===")
    
    try:
        from flwr.serverapp.strategy import FedAvg
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Flower
        strategy = FedAvg()
        
        print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è FedAvg —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        print(f"‚úÖ –¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {type(strategy).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        available_attrs = [attr for attr in dir(strategy) if not attr.startswith('_')]
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {len(available_attrs)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        raise

def test_server_app_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ServerApp"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ SERVERAPP ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ app —è–≤–ª—è–µ—Ç—Å—è ServerApp
        from flwr.serverapp import ServerApp
        assert isinstance(fl_app.server_app.app, ServerApp), "app –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º ServerApp"
        print("‚úÖ app —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º ServerApp")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è main —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        assert hasattr(fl_app.server_app, 'main'), "–§—É–Ω–∫—Ü–∏—è main –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è main —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è main –∏–º–µ–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @app.main()
        assert callable(fl_app.server_app.main), "–§—É–Ω–∫—Ü–∏—è main –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑—ã–≤–∞–µ–º–æ–π"
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è main —è–≤–ª—è–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞–µ–º–æ–π")
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ServerApp –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ ServerApp: {e}")
        raise

def print_config_summary():
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        config = load_config_from_pyproject()
        print("\n=== –°–í–û–î–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –°–ï–†–í–ï–†–ê –ò–ó PYPROJECT.TOML ===")
        for key, value in config.items():
            print(f"   {key}: {value}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ pyproject.toml...")
    
    # –ü–µ—á–∞—Ç–∞–µ–º —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print_config_summary()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_config_loading()
    test_model_creation()
    test_fedavg_strategy()
    test_server_app_structure()
    test_server_initialization()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ pyproject.toml –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è FedAvg –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è")
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ServerApp –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
    print("‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑-–∑–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π Flower")